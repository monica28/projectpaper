*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.jpm.sig.android
Package Version Name: 3.33
Package Version Code: 333000034
Min Sdk: 16
Target Sdk: 23
MD5   : 102d3989cc95aa1a36876944ae430bf9
SHA1  : d20b509597ce5e6f4f97dfd5ec2cf8256bbea72c
SHA256: 410719d85d536290e21071d1e824e145c1fa01d0ff4da18c0b6eff181af450bc
SHA512: 183a03e54b3a2182599ae27a52d770c6d225dd7cfd9bc382993d14cbf07618fabc9ea0852baffc7fe02a5b33b7cd4245de244f4dd25e48051f3fd123043d63df
Analyze Signature: 49e5bccf7ac40947320ffb107d26851a8cc0890191b59333946ec667faf3ca6674b37cbc4862a7d890015c415b69fdfe5162f4f104df0a3c1c21472b9d676183
------------------------------------------------------------------------------------------------
[Critical]  App Sandbox Permission Checking:
           Security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found (Please check:
           https://www.owasp.org/index.php/Mobile_Top_10_2014-M2):
               [getSharedPreferences]
               => Lcom/google/android/gms/flags/impl/zzb$1;->call()Ljava/lang/Object; (0xa) --->
                    Landroid/content/Context;->getSharedPreferences(Ljava/lang/String; I)Landroid/content/SharedPreferences;
               --------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:5):
               http://localhost:8082
                   => Lcom/chase/sig/android/util/HttpUrlConnectionHelper;->Ã(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Z)Lcom/chase/sig/android/util/HttpResponse;
               http://maps.google.com/maps?q=
                   => Lcom/chase/sig/android/activity/LocationInfoActivity;->N()Landroid/content/Intent;
               http://play.google.com/store/apps/details?id=
                   => Lcom/chase/sig/android/activity/HomeActivityDialog$3;->onClick(Landroid/content/DialogInterface; I)V
               http://plus.google.com/
                   => Lcom/google/android/gms/common/internal/zzn;-><clinit>()V
               http://www.amazon.com/gp/mas/dl/android?p=com.jpm.sig.android
                   => Lcom/chase/sig/android/activity/JPDialogFragment$39;->onClick(Landroid/content/DialogInterface; I)V
[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
           References:
           (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
           (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (3)https://jira.appcelerator.org/browse/TIMOB-4488
           Vulnerable codes:
               Lcom/chase/sig/android/activity/UltimateRewardsActivity$ChaseWebViewClient;->onReceivedSslError(Landroid/webkit/WebView;
                    Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V
               => Lcom/chase/sig/android/activity/UltimateRewardsActivity;->a_(Landroid/os/Bundle;)V (0x8e) --->
                    Landroid/webkit/WebView;->setWebViewClient(Landroid/webkit/WebViewClient;)V
[Critical] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           Found a critical WebView "addJavascriptInterface" vulnerability. This method can be used to allow JavaScript to control the host
           application.
           This is a powerful feature, but also presents a security risk for applications targeted to API level JELLY_BEAN(4.2) or below,
           because JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing
           untrusted content could allow an attacker to manipulate the host application in unintended ways, executing Java code with the
           permissions of the host application.
           Reference:
             1."http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
           java.lang.String) "
             2.https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
             3.http://50.56.33.56/blog/?p=314
             4.http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-vulnerability/
           Please modify the below code:
               => Lcom/chase/sig/android/activity/hybrid/OffersPortalActivity;->a_(Landroid/os/Bundle;)V (0xae) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/mme/services/permid/e;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x34) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/mme/services/permid/e;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x40) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/mme/services/permid/g;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x32) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/mme/services/permid/g;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x3e) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/mme/services/permid/g;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x54) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/mme/services/permid/g;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x6a) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/mme/services/permid/g;->Ã(Landroid/app/Application;)Ljava/lang/String; (0x80) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/chase/mob/dmf/cax/util/CrashReportBuilderHelper;->findSpecificationId()Ljava/lang/String; (0x14) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
[Warning] <SSL_Security> SSL Certificate Verification Checking:
           Please make sure this app has the conditions to check the validation of SSL Certificate. If it's not properly checked, it MAY
           allows self-signed, expired or mismatch CN certificates for SSL connection.
           This is a critical vulnerability and allows attackers to do MITM attacks without your knowledge.
           If you are transmitting users' username or password, these sensitive information may be leaking.
           Reference:
           (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (2)Android Security book: http://goo.gl/BFb65r
           (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561
           This vulnerability is much more severe than Apple's "goto fail" vulnerability: http://goo.gl/eFlovw
           Please do not try to create a "X509Certificate" and override "checkClientTrusted", "checkServerTrusted", and "getAcceptedIssuers"
           functions with blank implementation.
           We strongly suggest you use the existing API instead of creating your own X509Certificate class.
           Please modify or remove these vulnerable code:
               --------------------------------------------------
               [Maybe Vulnerable (Please manually confirm)]
               => Lcom/chase/sig/android/service/ssl/PinnedCertificateTrustManager;
                     -> used by:
                    Lcom/chase/sig/android/util/CertificatePinningManager;->Ã(Ljava/lang/String;)Ljavax/net/ssl/HttpsURLConnection;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/chase/sig/android/activity/ManagedContentActivity;->Ã(Landroid/os/Bundle;)V
               Lcom/chase/sig/android/activity/PrivacyNoticeDetailActivity;->a_()V
               Lcom/chase/sig/android/activity/PrivacyNoticeDetailActivity;->onPause()V
               Lcom/chase/sig/android/activity/PrivacyNoticeDetailActivity;->Ã(Landroid/os/Bundle;)V
               Lcom/chase/sig/android/activity/QuickDepositServiceActivationActivity;->Ã(Landroid/os/Bundle;)V
               Lcom/chase/sig/android/activity/QuickDepositSignUpActivity;->Ã(Landroid/os/Bundle;)V
               Lcom/chase/sig/android/activity/UltimateRewardsActivity;->a_(Landroid/os/Bundle;)V
               Lcom/chase/sig/android/activity/UltimateRewardsActivity;->onPause()V
               Lcom/chase/sig/android/activity/UltimateRewardsActivity;->onResume()V
               Lcom/chase/sig/android/activity/hybrid/OffersPortalActivity;->a_(Landroid/os/Bundle;)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/chase/sig/android/activity/UltimateRewardsActivity;->a_(Landroid/os/Bundle;)V (0xa2) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/UltimateRewardsActivity;->onResume()V (0x14) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/hybrid/OffersPortalActivity;->a_(Landroid/os/Bundle;)V (0x64) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/hybrid/OffersPortalActivity;->a_(Landroid/os/Bundle;)V (0xd8) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/ManagedContentActivity;->Ã(Landroid/os/Bundle;)V (0x5a) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/PrivacyNoticeDetailActivity;->a_()V (0x1c) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/chase/sig/android/activity/PrivacyNoticeDetailActivity;->Ã(Landroid/os/Bundle;)V (0x50) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               Lcom/a/a/b/c;->Ã(I Lcom/a/a/b/c$a;)Lcom/a/a/b/c;  => 'su'
               Lcom/mme/services/root/b;->Ã(Landroid/app/Application; Ljava/lang/String;)Lcom/mme/services/root/RootLog;  => 'su'
               Lcom/a/a/a;->Ã()Z  => 'su'
               Lcom/a/a/c/b;->Ã(Ljava/lang/String;)Z  => '/system/bin/'
               Lcom/a/a/b/c;->Ã()Lcom/a/a/b/c;  => '/system/bin/sh'
               Lcom/a/a/c/b;->Ã(Ljava/lang/String;)Z  => '/system/bin/failsafe/'
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/mme/orchestration/MMEUtilities;->Ã(Ljava/io/InputStream; Ljava/lang/String;)Ljava/lang/String; (0x16) --->
                    Ljava/io/File;->delete()Z
               => Lcom/chase/sig/android/uicore/util/FileReferenceMap;->Ã(Ljava/io/File; Ljava/util/Calendar;)V (0x5a) --->
                    Ljava/io/File;->delete()Z
               => Lcom/chase/sig/android/activity/AbstractTransactionCompleteActivity;->onDestroy()V (0x40) ---> Ljava/io/File;->delete()Z
               => Lcom/chase/sig/android/activity/AbstractTransactionCompleteActivity;->onDestroy()V (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/chase/sig/android/activity/AccountStatementListActivity;->onDestroy()V (0x40) ---> Ljava/io/File;->delete()Z
               => Lcom/chase/sig/android/activity/AccountStatementListActivity;->onDestroy()V (0x46) ---> Ljava/io/File;->delete()Z
[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Found codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml:
               => Lcom/chase/sig/android/activity/HomeActivity;->a_ (Landroid/os/Bundle;)V
               => Lcom/chase/sig/android/activity/HomeActivity;->a_ (Landroid/os/Bundle;)V
[Notice] <Hacker> Code Setting Preventing Screenshot Capturing:
           This app has code setting the preventing screenshot capturing.
           Example: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
           It is used by the developers to protect the app:
               => Lcom/chase/sig/android/activity/HomeActivity;->a_(Landroid/os/Bundle;)V (0x956) ---> Landroid/view/Window;->setFlags(I I)V
               => Lcom/chase/sig/android/activity/AuthenticatedActivity;->onCreate(Landroid/os/Bundle;)V (0x56) --->
                    Landroid/view/Window;->setFlags(I I)V
[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/zze;->Ã(Landroid/content/Context;)I (0x1aa) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/zze;->Ã(Landroid/content/pm/PackageManager;)Z (0x18) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/zze;->Ã(I)Z (0x26) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libLIB-v.2.8.so]
               => Lcom/mme/services/opaque/ONDK;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libLIB-v.2.8.so]
               => Lcom/mme/services/permid/PNDK;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libLIB-v.2.8.so]
               => Lcom/mme/services/sse/SNDK;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libblur.so]
               => Lcom/enrique/stackblur/NativeBlurProcess;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is "NOT" using Android SQLite databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info]  External Storage Accessing:
           External storage access not found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking:
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
------------------------------------------------------------
AndroBugs analyzing time: 8.233 secs
Total elapsed time: 28.593 secs
